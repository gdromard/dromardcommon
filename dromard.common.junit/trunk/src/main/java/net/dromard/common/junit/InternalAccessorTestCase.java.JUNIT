package it.newinstance.test.util;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import junit.framework.TestCase;

/*
 * Base class for TestCases that need to access private fields and methods of 
 */
public abstract class InternalAccessorTestCase extends TestCase {

    protected static Object getFieldValue(Object o, String fieldName) {
        try {
            return getField(o.getClass(), fieldName).get(o);
        } catch (Exception x) {
            throw new RuntimeException(x);
        }
    }

    protected static Object invoke(Object o, String methodName, Object[] args, Class[] types) {
        try {
            return getMethod(o.getClass(), methodName, types).invoke(o, args);
        } catch (Exception x) {
            throw new RuntimeException(x);
        }
    }

    private static Field getField(Class clazz, String fieldName)
            throws NoSuchFieldException {
        try {
            Field f = clazz.getDeclaredField(fieldName);
            f.setAccessible(true);
            return f;
        } catch (SecurityException e) {
            throw new RuntimeException(e);
        } catch (NoSuchFieldException e) {
            if (clazz == Object.class)
                throw e;
            return getField(clazz.getSuperclass(), fieldName);
        }
    }

    private static Method getMethod(Class clazz, String methodName,
            Class[] types) throws NoSuchMethodException {
        try {
            Method m = clazz.getDeclaredMethod(methodName, types);
            m.setAccessible(true);
            return m;
        } catch (SecurityException x) {
            throw new RuntimeException(x);
        } catch (NoSuchMethodException x) {
            if (clazz == Object.class)
                throw x;
            return getMethod(clazz.getSuperclass(), methodName, types);
        }
    }
} 