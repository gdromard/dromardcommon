/*
 * Created on 15 mars 2006 By Gabriel DROMARD
 */
package net.dromard.common.properties;

import java.text.MessageFormat;
import java.util.Iterator;
import java.util.Properties;

import net.dromard.common.util.StringHelper;

/**
 * This Extention of java.util.Properties manage 2 aspects:
 * <ul>
 * <li>
 * <h4>Links to others keys</h4>
 * <b>Exemple:</b>
 *
 * <pre>
 *    my.key=Hi ${user.key}, this is a mail generated by ${robot.name.key}.
 *    user.key=Frederic Dupont
 *    robot.name.key=Robot
 * </pre>
 *
 * So <code>System.out.println(prop.getProperty("my.key")); </code> will return :
 *
 * <pre>
 *    Hi Frederic Dupont, this is a mail generated by Robot.
 * </pre>
 *
 * </li>
 * <li>
 * <h4>Value inclusion at execution time</h4>
 * <b>Exemple:</b>
 *
 * <pre>
 *    my.key=Hi {0}, this is a mail generated by ${robot.name.key} at {1,date}.
 *    robot.name.key=Robot
 * </pre>
 *
 * So <code>System.out.println(prop.getFormatedProperty("my.key", new Object[] {"Frederic Dupont", new Date()})); </code> will return :
 *
 * <pre>
 *    Hi Frederic Dupont, this is a mail generated by Robot.
 * </pre>
 *
 * </li>
 * </ul>
 */
public class DynamicProperties extends Properties {

    /** serial UID. */
    private static final long serialVersionUID = -181417557219172496L;

    /**
     * Default constructor.
     */
    public DynamicProperties() {
        super();
    }

    /**
     * Retreive a property.
     * @see java.util.Properties#getProperty(java.lang.String)
     * @param key the property key.
     * @return The property value (if it exists)
     */
    public final String getProperty(final String key) {
        return transform(super.getProperty(key));
    }

    /**
     * Retreive a property using a formater.
     * @see java.util.Properties#getProperty(java.lang.String)
     * @see java.text.MessageFormat#format(java.lang.String, java.lang.Object[])
     * @param key       The property key.
     * @param arguments The MessageFormat arguments.
     * @return The property value formated.
     */
    public final String getFormatedProperty(final String key, final Object[] arguments) {
        return MessageFormat.format(transform(super.getProperty(key)), arguments);
    }

    /**
     * It will assume that the key value contains several values separated by a '|'.
     * @param key The property key
     * @return An array of string corresponding to the pipe (|) separated strings.
     */
    public final String[] getPropertyAsArray(final String key) {
        String value = getProperty(key);
        if (value != null) {
            return StringHelper.split(value, "|");
        }
        return null;
    }

    /**
     * This method is in charge of retreiving values of internaly referenced keys.
     * @param propertyValue The propertyValue to be parsed and resolved.
     * @return The propertyValue with inner references to others keys resolved.
     */
    private String transform(final String propertyValue) {
        String result = propertyValue;
        if (propertyValue != null) {
            while (result.indexOf("$(") != -1) {
                String intermediateResult = result;
                for (Iterator iter = this.keySet().iterator(); iter.hasNext();) {
                    String key = iter.next().toString();
                    String value = this.get(key).toString();
                    if (!propertyValue.equals(value)) {
                        result = StringHelper.replaceAll(result, "$(" + key.toString() + ")", value);
                    }
                }
                if (intermediateResult.equals(result)) {
                    return result;
                    //throw new Error("Properties value: '" + result + "' migth not point to a valid key.");
                }
            }
            while (result.indexOf("${") != -1) {
                String intermediateResult = result;
                for (Iterator iter = this.keySet().iterator(); iter.hasNext();) {
                    String key = iter.next().toString();
                    String value = this.get(key).toString();
                    if (!propertyValue.equals(value)) {
                        result = StringHelper.replaceAll(result, "${" + key.toString() + "}", value);
                    }
                }
                if (intermediateResult.equals(result)) {
                    return result;
                    //throw new Error("Properties value: '" + result + "' migth not point to a valid key.");
                }
            }
        }
        return result;
    }
}
